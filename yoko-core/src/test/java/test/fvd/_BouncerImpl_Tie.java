// POA Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package test.fvd;

import java.io.Serializable;
import java.lang.ClassCastException;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import javax.rmi.CORBA.Tie;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.BAD_PARAM;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAPackage.ObjectNotActive;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;

public class _BouncerImpl_Tie extends org.omg.PortableServer.Servant implements Tie {
    
    private BouncerImpl target = null;
    
    private static final String[] _type_ids = {
        "RMI:test.fvd.Bouncer:0000000000000000"
    };
    
    public void setTarget(Remote target) {
        this.target = (BouncerImpl) target;
    }
    
    public Remote getTarget() {
        return target;
    }
    
    public org.omg.CORBA.Object thisObject() {
        return _this_object();
    }
    
    public void deactivate() {
        try {
            _poa().deactivate_object(_poa().servant_to_id(this));
        }
        catch(WrongPolicy e) { }
        catch(ObjectNotActive e) { }
        catch(ServantNotActive e) { }
    }
    
    public ORB orb() {
        return _orb();
    }
    
    public void orb(ORB orb) {
        try {
            ((org.omg.CORBA_2_3.ORB)orb).set_delegate(this);
        }
        catch(ClassCastException e) {
            throw new BAD_PARAM("POA Servant needs an org.omg.CORBA_2_3.ORB");
        }
    }
    
    public String[] _all_interfaces(POA poa, byte[] objectId) { 
        return (String [] )  _type_ids.clone();
    }
    
    public OutputStream _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in = 
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            switch (method.length()) {
                case 8: 
                    if (method.equals("shutdown")) {
                        return shutdown(in, reply);
                    }
                case 11: 
                    if (method.equals("bounceValue")) {
                        return bounceValue(in, reply);
                    }
                case 12: 
                    if (method.equals("bounceObject")) {
                        return bounceObject(in, reply);
                    }
                case 14: 
                    if (method.equals("bounceAbstract")) {
                        return bounceAbstract(in, reply);
                    }
                case 18: 
                    if (method.equals("bounceSerializable")) {
                        return bounceSerializable(in, reply);
                    }
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }
    
    private OutputStream bounceAbstract(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Abstract arg0 = (Abstract) in.read_abstract_interface(Abstract.class);
        Abstract result = target.bounceAbstract(arg0);
        OutputStream out = reply.createReply();
        Util.writeAbstractObject(out,result);
        return out;
    }
    
    private OutputStream bounceObject(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Object arg0 = Util.readAny(in);
        Object result = target.bounceObject(arg0);
        OutputStream out = reply.createReply();
        Util.writeAny(out,result);
        return out;
    }
    
    private OutputStream bounceSerializable(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Serializable arg0 = (Serializable) Util.readAny(in);
        Serializable result = target.bounceSerializable(arg0);
        OutputStream out = reply.createReply();
        Util.writeAny(out,result);
        return out;
    }
    
    private OutputStream bounceValue(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Value arg0 = (Value) in.read_value(Value.class);
        Value result = target.bounceValue(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,Value.class);
        return out;
    }
    
    private OutputStream shutdown(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        target.shutdown();
        OutputStream out = reply.createReply();
        return out;
    }
}
