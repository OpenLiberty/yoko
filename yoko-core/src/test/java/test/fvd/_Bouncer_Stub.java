// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package test.fvd;

import java.io.Serializable;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;

public class _Bouncer_Stub extends Stub implements Bouncer {

    private static final String[] _type_ids = {
        "RMI:test.fvd.Bouncer:0000000000000000"
    };

    public String[] _ids() {
        return (String [] )  _type_ids.clone();
    }

    public Abstract bounceAbstract(Abstract arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("bounceAbstract", true);
                        Util.writeAbstractObject(out,arg0);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Abstract) in.read_abstract_interface(Abstract.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("bounceAbstract",test.fvd.Bouncer.class);
                if (so == null) {
                    continue;
                }
                try {
                    Abstract arg0Copy = (Abstract) Util.copyObject(arg0,_orb());
                    Abstract result = ((test.fvd.Bouncer)so.servant).bounceAbstract(arg0Copy);
                    return (Abstract)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }

    public Object bounceObject(Object arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("bounceObject", true);
                        Util.writeAny(out,arg0);
                        in = _invoke(out);
                        return Util.readAny(in);
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("bounceObject",test.fvd.Bouncer.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object arg0Copy = (Object) Util.copyObject(arg0,_orb());
                    Object result = ((test.fvd.Bouncer)so.servant).bounceObject(arg0Copy);
                    return (Object)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }

    public Serializable bounceSerializable(Serializable arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("bounceSerializable", true);
                        Util.writeAny(out,arg0);
                        in = _invoke(out);
                        return (Serializable) Util.readAny(in);
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("bounceSerializable",test.fvd.Bouncer.class);
                if (so == null) {
                    continue;
                }
                try {
                    Serializable arg0Copy = (Serializable) Util.copyObject(arg0,_orb());
                    Serializable result = ((test.fvd.Bouncer)so.servant).bounceSerializable(arg0Copy);
                    return (Serializable)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }

    public Value bounceValue(Value arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out =
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("bounceValue", true);
                        out.write_value((Serializable)arg0,Value.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Value) in.read_value(Value.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("bounceValue",test.fvd.Bouncer.class);
                if (so == null) {
                    continue;
                }
                try {
                    Value arg0Copy = (Value) Util.copyObject(arg0,_orb());
                    Value result = ((test.fvd.Bouncer)so.servant).bounceValue(arg0Copy);
                    return (Value)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }

    public void shutdown() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("shutdown", true);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("shutdown",test.fvd.Bouncer.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((test.fvd.Bouncer)so.servant).shutdown();
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
}
