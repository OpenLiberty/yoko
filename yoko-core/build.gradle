sourceSets {
  // declare additional source sets, and set their classpaths
  artifact.compileClasspath += main.output.classesDirs
  v0.compileClasspath += main.output + artifact.output
  v1.compileClasspath += main.output + artifact.output + v0.output
  v2.compileClasspath += main.output + artifact.output + v0.output
  test.java.srcDir "src/test/java-testify"  // separate ported tests until porting is complete
  test.compileClasspath += artifact.output
}

testClasses.dependsOn v0Classes, v1Classes, v2Classes

configurations {
  artifactImplementation.extendsFrom implementation, testLib
  v0Implementation.extendsFrom artifactImplementation
  v1Implementation.extendsFrom artifactImplementation
  v2Implementation.extendsFrom artifactImplementation
}

dependencies {
  // depend on the Yoko spec jars
  implementation project(':yoko-osgi')
  implementation project(':yoko-spec-corba')
  implementation project(':yoko-rmi-spec')

  // and the rest of the Yoko implementation
  implementation project(":yoko-util")
  implementation project(":yoko-rmi-impl")

  artifactImplementation sourceSets.main.output

  // use shared test utilities
  testLib project(":yoko-testify") // local tests use the production code from testify
  testLib project(":yoko-util").sourceSets.test.output     // BUT they use the test code from yoko-util
  testLib project(":yoko-rmi-impl").sourceSets.test.output // and from yoko-rmi-impl
  testImplementation sourceSets.artifact.output
}

test {
  exclude '**/Abstract*'
  // Set up the class paths for acme.Loader
  systemProperty "acme.loader.v0.path", (sourceSets.v0.output.classesDirs).join(File.pathSeparator)
  systemProperty "acme.loader.v1.path", (sourceSets.v0.output.classesDirs + sourceSets.v1.output.classesDirs).join(File.pathSeparator)
  systemProperty "acme.loader.v2.path", (sourceSets.v0.output.classesDirs + sourceSets.v2.output.classesDirs).join(File.pathSeparator)
}

task debug() {
  doLast {
    sourceSets.each { srcSet ->
      println "["+srcSet.name+"]"
      print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
      print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
      print "-->Compile classpath:\n"
      srcSet.compileClasspath.files.each {
        print "  "+it.path+"\n"
      }
      println ""
    }
  }
}
