/**
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
*  contributor license agreements.  See the NOTICE file distributed with
*  this work for additional information regarding copyright ownership.
*  The ASF licenses this file to You under the Apache License, Version 2.0
*  (the "License"); you may not use this file except in compliance with
*  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package test.rmi;


/**
* test/rmi/SampleCorbaHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from src/test/java/test/rmi/SampleCorbaObject.idl
* 9. maj 2006 14:03:27 CEST
*/

abstract public class SampleCorbaHelper
{
  private static String  _id = "IDL:test/rmi/SampleCorba:1.0";

  public static void insert (org.omg.CORBA.Any a, test.rmi.SampleCorba that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static test.rmi.SampleCorba extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      __typeCode = org.omg.CORBA.ORB.init ().create_interface_tc (test.rmi.SampleCorbaHelper.id (), "SampleCorba");
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static test.rmi.SampleCorba read (org.omg.CORBA.portable.InputStream istream)
  {
    return narrow (istream.read_Object (_SampleCorbaStub.class));
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, test.rmi.SampleCorba value)
  {
    ostream.write_Object ((org.omg.CORBA.Object) value);
  }

  public static test.rmi.SampleCorba narrow (org.omg.CORBA.Object obj)
  {
    if (obj == null)
      return null;
    else if (obj instanceof test.rmi.SampleCorba)
      return (test.rmi.SampleCorba)obj;
    else if (!obj._is_a (id ()))
      throw new org.omg.CORBA.BAD_PARAM ();
    else
    {
      org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      test.rmi._SampleCorbaStub stub = new test.rmi._SampleCorbaStub ();
      stub._set_delegate(delegate);
      return stub;
    }
  }

  public static test.rmi.SampleCorba unchecked_narrow (org.omg.CORBA.Object obj)
  {
    if (obj == null)
      return null;
    else if (obj instanceof test.rmi.SampleCorba)
      return (test.rmi.SampleCorba)obj;
    else
    {
      org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();
      test.rmi._SampleCorbaStub stub = new test.rmi._SampleCorbaStub ();
      stub._set_delegate(delegate);
      return stub;
    }
  }

}
