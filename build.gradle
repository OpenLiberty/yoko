/* Configure classpath to find 3rd party plugins */
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.1.0'
  }
}

/**
 * Compute a hash no longer than <code>length</code> for the git repository.
 * @param length
 * @return the hash as a string
 */
def getGitHash(length) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', "--short=$length", 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def testProjects = "osgi util rmi-impl core test".split(" ").collect{s->project(":yoko-" + s)}
def shipProjects = "osgi util spec-corba rmi-spec rmi-impl core".split(" ").collect{s->project(":yoko-" + s)}

/* Configuration for all projects (including this parent) */
allprojects  {
  apply plugin: 'maven-publish'
  group = 'org.apache.yoko'
  version = '1.5.0.' + getGitHash(10)
}

/* Standard configuration for each subproject */
subprojects {
  apply plugin: 'java'
  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  repositories {
    mavenLocal()
    maven { url "http://repository.apache.org/snapshots" }
    maven { url "http://repo.maven.apache.org/maven2" }
  }

  configurations {
    // declare a new configuration to map to Maven's provided scope
    provided.transitive = true
    compile.extendsFrom provided
    // declare a new configuration to use for spec API jars
    spec.transitive = true
    compile.extendsFrom spec
  }

  sourceSets.main.compileClasspath += configurations.provided
}

/* Standard configuration for subprojects with tests */
configure(testProjects) {
  compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
  }

  // standardise the test deps here
  dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'
    testImplementation "org.hamcrest:hamcrest:2.1"
    testImplementation "org.junit.jupiter:junit-jupiter:5.5.1"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.5.1"
    testRuntime "org.junit.vintage:junit-vintage-engine:5.5.1"
  }

  if (JavaVersion.current() < JavaVersion.VERSION_1_9) {
    // Add a task to copy the spec jars into a folder
    // to use with the endorsed standards mechanism
    task stageEndorsed(type: Sync) {
      from configurations.spec
      into temporaryDir
    }

    // Make all compilation tasks use the endorsed dir
    tasks.withType(JavaCompile) {
      dependsOn stageEndorsed
      options.compilerArgs << "-Djava.endorsed.dirs=$stageEndorsed.destinationDir"
    }

    // Make execute tasks use the endorsed dir
    tasks.withType(Test) {
      dependsOn stageEndorsed
      jvmArgs "-Djava.endorsed.dirs=$stageEndorsed.destinationDir"
    }
  }

  // ensure tests run under $buildDir somewhere
  test {
    useJUnitPlatform()
    workingDir = "$buildDir/testWorkingDir"
    doFirst {workingDir.mkdirs()}
    testLogging {
      // set options for log level LIFECYCLE
      events "passed", "skipped", "failed", "standardOut"
      showExceptions true
      exceptionFormat "full"
      showCauses true
      showStackTraces true

      // set options for log level DEBUG and INFO
      debug {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
      }
      info.events = debug.events
      info.exceptionFormat = debug.exceptionFormat

      afterTest { desc, result ->
        def totalTime = result.endTime - result.startTime
        println """"Test elapsed time","$desc.name",$totalTime"""
      }

      afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
          def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
          def startItem = '|  ', endItem = '  |'
          def repeatLength = startItem.length() + output.length() + endItem.length()
          println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
        def totalTime = result.endTime - result.startTime
        println """"Suite elapsed time","$desc.name",$totalTime"""
      }
    }
  }
}

/* Standard configuration for subprojects with shippable outputs */
configure(shipProjects) {
  apply plugin: 'osgi'
  publishing {
    publications {
      maven(MavenPublication) {
        artifact jar

        pom.withXml {
          def rootNode = asNode()

          // // specify packaging type as bundle (default is pom)
          // def packaging = root.packaging[0] ?:
          //                 root.appendNode('packaging')
          // packaging.setValue('bundle')

          def depsNode = rootNode.dependencies[0] ?:
                  rootNode.appendNode('dependencies')

          // declare 'provided' scope dependencies in the pom.xml
          // Note: the 'provided' scope is built into Maven,
          // but it is a custom configuration in this Gradle
          configurations.provided.allDependencies.each {
            def depNode = depsNode.appendNode('dependency')
            depNode.appendNode('groupId', it.group)
            depNode.appendNode('artifactId', it.name)
            depNode.appendNode('version', it.version)
            depNode.appendNode('scope', 'provided')
          }

          // declare compile scope dependencies in the pom.xml
          // as compile dependencies
          configurations.compile.allDependencies.each {
            def depNode = depsNode.appendNode('dependency')
            depNode.appendNode('groupId', it.group)
            depNode.appendNode('artifactId', it.name)
            depNode.appendNode('version', it.version)
            depNode.appendNode('scope', 'compile')
          }
        }
      }
    }
  }

  jar {
    dependsOn "generatePomFileForMavenPublication"
    // generate the maven dependency metadata
    into("/META-INF/maven/$project.group/$project.name") {
      from 'build/publications/maven'
      rename "pom-default.xml", "pom.xml"
    }
    manifest {
      instruction 'Bundle-DocURL'          , "http://geronimo.apache.org/maven/yoko/$project.version/$project.name"
      instruction 'Bundle-License'         , 'http://www.apache.org/licenses/LICENSE-2.0.txt'
      instruction 'Bundle-Vendor'          , 'The Apache Software Foundation'
      instruction 'Import-Package'         , '!sun.*', '*'
    }
  }

  publish.dependsOn build
  // generated tasks need to be expressed as strings
  // because they don't exist yet when these lines are executed
  publish.dependsOn "publishMavenPublicationToMavenLocal"
  publish.dependsOn "publishToMavenLocal"
}
